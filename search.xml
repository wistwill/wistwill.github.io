<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Java基础--数组]]></title>
    <url>%2F2019%2F08%2F04%2FJava%E5%9F%BA%E7%A1%80--%E6%95%B0%E7%BB%84%2F</url>
    <content type="text"><![CDATA[数组的概念存储同一数据类型的多个元素的容器。 数组的两种定义格式123456/** 格式1：数据类型 [] 数组名 ；* int [] arr; //定义一个int类型的数组，数组名为arr* 格式2：数据类型 变量名称 [];* int arr []; //定义一个int类型的变量，变量名是arr数组*/ 数组的两种初始化方式作用为数组开辟内存空间，为数组中的元素赋初始值 动态初始化12345678910/** 数据类型 [] 数组名 = new 数据类型 [数组长度]；* int [] arr = new int [5];* 特点：动态初始化，我们只给出长度，系统给出初始化值；* byte，double，int，long ：0* float，double ：0.0* char : '\u0000'* boolean : false* 引用数据类型 : null*/ 123456789101112131415161718package com.will.work;public class Array_Demo &#123; public static void main(String[] args) &#123; int[] arr = new int[4]; System.out.println("数组首地址:"); System.out.println(arr); System.out.println("赋值前:"); System.out.println(arr[0] + "\t" + arr[1] + "\t" + arr[2] + "\t" + arr[3]); arr[0] = 10; arr[1] = 20; arr[2] = 30; arr[3] = 40; System.out.println("赋值后:"); System.out.println(arr[0] + "\t" + arr[1] + "\t" + arr[2] + "\t" + arr[3]); &#125;&#125; 静态初始化1234567/** 数据类型 [] 数组名 = new 数据类型[] &#123;元素1，元素2，元素3...&#125;；* int [] arr = new int [] &#123;1,2,3&#125;;* 简化格式：数据类型 [] 数组名 = &#123;元素1，元素2，元素3...&#125;；* int [] arr = &#123;1,2,3&#125;;* 特点：动态初始化，我们只给出初始化值，由系统给出长度；*/ Java中的内存分配 12345678910111213141516171819202122package com.will.work;public class Array2_Demo &#123; /* * 两个数组指向同一堆内存 * 遍历输出 */ public static void main(String[] args) &#123; int [] arr= &#123;1,2,3,4,5&#125;; int [] arr1=arr; int [] arr2=arr; int j=2; for (int i=0;i&lt;5;i++) &#123; arr1[i] =j; j+=2; &#125; for(int a=0;a&lt;5;a++) &#123; System.out.println("数组中的第"+a+"个元素的值为："+arr2[a]); &#125; &#125;&#125; 数组中的元素访问访问数组元素的格式：数组名 [索引]索引：数组元素的编号(下标),索引是从0开始的，最大的索引是数组的长度-1. 小技巧：数组长度：数组名.length 12345678910111213141516package com.will.work;public class Array_Demo1 &#123; public static void main(String[] args) &#123; int arr[] = new int[6]; int j=2; for (int i = 0; i &lt; 6; i++) &#123; arr[i] = j; j+=2; &#125; for(int a=0;a&lt;6;a++) &#123; System.out.println("数组中的第"+a+"个元素为："+arr[a]); &#125; &#125;&#125; 12345678910111213141516171819package com.will.work;public class Array2_Demo3 &#123; /* * 定义一个数组：&#123;171,72,19,16,118,51,210,7,18&#125; * 求满足元素的个位和十位不为7，且为偶数的元素之和 */ public static void main(String[] args) &#123; int [] arr= &#123;171,72,19,16,118,51,210,7,18&#125;; int sum=0; for(int i=0;i&lt;arr.length;i++) &#123; if (arr[i]%10!=7&amp;&amp;arr[i]/10%10!=7&amp;&amp;arr[i]%2==0) &#123; sum+=arr[i]; &#125; &#125; System.out.println("满足条件的元素和为："+sum); &#125;&#125; 数组中两个常见的小问题：ArrayIndexOutOfBoundsException :数组索引越界异常产生的原因：访问了不存在的索引对应的元素 12int [] arr = &#123;1,2,3&#125; int num=arr[3]; //索引：数组元素的编号(下标),索引是从0开始的，最大的索引是数组的长度-1. NullPointerException : 空指针异常产生的原因：访问了不再指向堆内存的数据，对象为null，还在使用对象访问其元素 null：可以赋值给引用数据类型。 123int [] arr = &#123;1,2,3&#125; arr=null；int num=arr[2]; 案例:求数组的最大最小值12345678910111213141516171819202122232425262728package com.will.work;public class Array2_MaxAndMin &#123; /* * 求下面数组的最大最小值 * &#123;11,33,77,22&#125; */ public static void main(String[] args) &#123; int []arr= &#123;11,33,77,22&#125;; int Max=arr[0]; int Min=arr[0]; for(int i=0;i&lt;arr.length;i++) &#123; if(Max&lt;arr[i]) &#123; Max =arr[i]; &#125; &#125; System.out.println("最大值："+Max); System.out.println("-----------"); for(int i=0;i&lt;arr.length;i++) &#123; if(Min&gt;arr[i]) &#123; Min =arr[i]; &#125; &#125; System.out.println("最小值："+Min); &#125;&#125; 数组翻转1234567891011121314151617181920212223242526272829package com.will.work;public class Array2_Demo4 &#123; /* * 数组翻转 */ public static void main(String[] args) &#123; int[] arr = &#123; 1, 2, 3, 4, 5 &#125;; // 翻转前： System.out.print("翻转前：" + "\t"); for (int i = 0; i &lt; arr.length; i++) &#123; System.out.print(arr[i] + "\t"); &#125; System.out.println(); // 翻转 for (int startIndex = 0, endIndex = arr.length - 1; startIndex &lt; endIndex; startIndex++, endIndex--) &#123;// endIndex=arr.length-1 注意：最大索引为arr.length-1 int temp = arr[startIndex]; arr[startIndex] = arr[endIndex]; arr[endIndex] = temp; &#125; // 翻转后： System.out.print("翻转后：" + "\t"); for (int a = 0; a &lt; arr.length; a++) &#123; System.out.print(arr[a] + "\t"); &#125; &#125;&#125; 冒泡排序123456789101112131415161718192021222324package com.will.work;public class Array2_Demo1 &#123; /* * 使用冒泡排序：从小到大输出下列数组 */ public static void main(String[] args) &#123; int[] arr = &#123; 2, 5, 6, 7, 8, 3, 9, 0, 4, 1 &#125;; for (int i = 0; i &lt; arr.length; i++) &#123; for (int j = 0; j &lt; arr.length; j++) &#123; if (arr[i] &lt; arr[j]) &#123; int temp; temp = arr[j]; arr[j] = arr[i]; arr[i] = temp; &#125; &#125; &#125; for (int a = 0; a &lt; arr.length; a++) &#123; System.out.println("排序后的数组为：" + arr[a]); &#125; &#125;&#125; 数组练习之评委打分12345678910111213141516171819202122232425262728293031323334353637383940414243package com.will.work;import java.util.Scanner;public class Array1_Export_Score &#123; /* * 数组练习之评委打分 * 需求：首先有6个评委;去掉最高分、最低分给出平均分 */ public static void main(String[] args) &#123; int[] arr = new int[6]; int Max, Min, Avg,sum=0; Scanner sc = new Scanner(System.in); for (int i = 0; i &lt; arr.length; i++) &#123; System.out.println("请输入第" + (i+1) + "个评委的评分："); arr[i] = sc.nextInt(); if (arr[i] &lt; 0 &amp;&amp; arr[i] &gt; 100) &#123; System.out.println("请输入正确的评分!"); break; &#125; else &#123; sum+=arr[i]; //求6个评委的评分总和 &#125; &#125; // 求最大值 Max = arr[0]; for (int i = 0; i &lt; arr.length; i++) &#123; if (Max &lt; arr[i]) &#123; Max = arr[i]; &#125; &#125; // 求最小值 Min = arr[0]; for (int i = 0; i &lt; arr.length; i++) &#123; if (Min &gt; arr[i]) &#123; Min = arr[i]; &#125; &#125; Avg=(sum-Max-Min)/4; System.out.println("去掉一个最高分，去掉一个最低分，最后得分："+Avg); &#125;&#125; 不死神兔123456789101112131415161718192021222324package com.will.work;public class Arrary1_BuSiShenTu &#123; /* * 不死神兔案例 * 有一对兔子，每三个月生一对小兔子，请问在第20个月有多少对兔子 * 1 2 3 4 5 * 1 1 1 1 1 * 2 1 1 1 * 3 2 * 4 2+1=3 * 5 3+2=5 */ public static void main(String[] args) &#123; int[] arr = new int[20]; arr[0] = 1; arr[1] = 1; for (int i = 2; i &lt; arr.length; i++) &#123; arr[i] = arr[i - 1] + arr[i - 2]; &#125; System.out.println("到第20个月一共有：" + arr[19] + "对兔子."); &#125;&#125; 二维数组123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354package com.will.work;import java.util.Scanner;public class Array_Demo3 &#123; /* * 二维数组 : * 动态初始化 : 数据类型[][] 数组名 = new 数据类型[一维数组的个数][一维数组中元素的个数]; * 静态初始化 : 数据类型[][] 数组名 = new * 数据类型[][]&#123;&#123;元素1,元素2...&#125;,&#123;元素1,元素2...&#125;,&#123;元素1,元素2...&#125;...&#125;; * 数据类型[][] 数组名 = * &#123;&#123;元素1,元素2...&#125;,&#123;元素1,元素2...&#125;,&#123;元素1,元素2...&#125;...&#125;; */ public static void main(String[] args) &#123; // 数据类型[][] 数组名 = &#123;&#123;元素1,元素2...&#125;,&#123;元素1,元素2...&#125;,&#123;元素1,元素2...&#125;...&#125;; int[][] arr = &#123; &#123; 1, 2, 3 &#125;, &#123; 4, 5, 6 &#125;, &#123; 7, 8, 9 &#125; &#125;; System.out.println(arr); //二维数组的地址 System.out.println(arr[0]); //第一个一维数组的地址 System.out.println(arr[1]); System.out.println(arr[2]); System.out.println(arr.length); //二维数组中一维数组的个数 // System.out.println(arr[2][1]); System.out.println("---------------"); for (int i = 0; i &lt; arr[0].length; i++) &#123; System.out.println(arr[0][i]); &#125; for (int i = 0; i &lt; arr[1].length; i++) &#123; System.out.println(arr[1][i]); &#125; for (int i = 0; i &lt; arr[2].length; i++) &#123; System.out.println(arr[2][i]); &#125; System.out.println("---------------"); for (int x = 0; x &lt; arr.length; x++) &#123;// 遍历有几个一维数组 for (int i = 0; i &lt; arr[x].length; i++) &#123;// 遍历一维数组中的每一个元素 System.out.print(arr[x][i] + " "); &#125; System.out.println(); &#125; &#125;&#125;]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>数组</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Java基础--运算符]]></title>
    <url>%2F2019%2F07%2F23%2Fjava%E5%9F%BA%E7%A1%80--%E8%BF%90%E7%AE%97%E7%AC%A6%2F</url>
    <content type="text"><![CDATA[什么是运算符？​ -运算符就是用于对常量与变量进行操作运算的符号 运算符的种类与样式都有那些？ 类型 基本样式 扩展样式 算数运算符 +，-,*，/,%（二元） ++，--（一元） 赋值运算符 = +=，-=，*=，/=,%= 关系运算符 ==,!=,&gt;,&gt;=,&lt;,&lt;= 逻辑运算符 `&amp;， ，！，^` 三元运算符 关系表达式 ？表达式1 ： 表达式2 注意事项:算术运算符: 一元运算符: ++,-- ​ ——单独使用：单独使用的时候，不管在前或在后对结果没有影响 ​ ——参与操作：++ -- 在前，先对自身进行+1或者-1； ​ ++ -- 在后，先进行运算（赋值）再对自身进行+1或-1 二元运算符: +,-,*,/,%(求余) ​ /得到的是商；%得到的是余数 赋值运算符:基本：= int a = 10;把10赋值给int类型的变量a扩展：+=,-=,*=,/=,%=​ --运算规则：将运算符左边的变量和右边的值做运算,在把结果赋值给左边的变量 比较运算符（关系运算符）: &gt;,&gt;=,&lt;,&lt;=,!=,==​ --用关系表达运算符连接的式子叫做关系表达式，结果是一个boolean类型的值 逻辑运算符:&amp;&amp;(短路与)​ –有false则false具有短路作用，当左边为false则，右边不执行 ||(短路或)​ --有true则true具有短路作用，当左边为true则，右边不执行 !(逻辑非) &amp;(逻辑与)|(逻辑或) 位运算符(了解) ：~(按位取反) &amp;(按位与) |(按位或) &lt;&lt;(左移) &gt;&gt;(右移) ^(异或)​ --其中^代表异或：相同为false不同为true 条件运算符(三目运算符): 关系表达式？表达式1：表达式2；​ – ?: 代替if..else条件结构 最后给大家一个简易的口诀： 单目乘除为关系，逻辑三目后赋值 1234567891011121314151617181920package com.will.homework;import java.util.Scanner;public class Test3_Num &#123; /* * 使用运算符逐位输出一个三位数 */ public static void main(String[] args) &#123; int num; Scanner sc = new Scanner(System.in); System.out.println("请输入一个三位整数进行逐位输出："); num = sc.nextInt(); int h, m, s; s = num % 10; m = num /10 % 10; h = num / 10 / 10 % 10; System.out.println("您输入的数为：" + num +".\n" + "\n百位数是:\n" + h +"\n十位数是:\n"+m+"\n个位数是：\n"+s); &#125;&#125;]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>运算符</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Java基础--键盘录入]]></title>
    <url>%2F2019%2F07%2F23%2FJava%E5%9F%BA%E7%A1%80--%E9%94%AE%E7%9B%98%E5%BD%95%E5%85%A5%2F</url>
    <content type="text"><![CDATA[键盘录入步骤：导包1import java.util.Scanner; 创建对象1Scanner sc = new Scanner(System.in); 录入数据12system.out.println("请输入一个整数："); //提示输入int a = sc.nextInt(); 打印输出1system.out.println(a); 案例12345678910111213141516171819202122package com.will.work;import java.util.Scanner; //导包public class Test_Scanner &#123; /* * 案例1:使用键盘输入求和 */ public static void main(String[] args) &#123; //创建对象 Scanner sc = new Scanner (System.in); //输出提示并录入数据 System.out.println("请输入第一个整数："); int x = sc.nextInt(); System.out.println("请输入第二个整数："); int y = sc.nextInt(); //求和 int z = x+y; //打印输出 System.out.println(z); &#125; &#125; 123456789101112131415161718192021222324package com.will.work;import java.util.Scanner;public class Scanner_max &#123; /* * 案例2：求三个数的最大值 */ public static void main(String[] args) &#123; //创建对象 Scanner sc = new Scanner(System.in); //录入数据 System.out.println("请输入第一个整数：\r\n"); int a =sc.nextInt(); System.out.println("请输入第二个整数：\r\n"); int b =sc.nextInt(); System.out.println("请输入第三个整数：\r\n"); int c=sc.nextInt(); //通过三元组进行比较大小 int Max =a&gt;b?(a&gt;c?a:c):(b&gt;c?b:c); //打印输出Max System.out.println(Max); &#125; &#125;]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>键盘录入</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Java基础--流程控制]]></title>
    <url>%2F2019%2F07%2F23%2FJava%E5%9F%BA%E7%A1%80--%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6%2F</url>
    <content type="text"><![CDATA[分类顺序结构12345678910111213141516171819202122package com.will.work;import java.util.Scanner;public class OrderDemo &#123; /* * 顺序结构：自上而下，自左向右 */ public static void main(String[] args) &#123; int a,b; Scanner sc = new Scanner(System.in); System.out.println("请输入第一个整数：\r\n"); a = sc.nextInt(); System.out.println("请输入第二个整数：\r\n"); b = sc.nextInt(); System.out.println("start"); if(a==b) &#123; System.out.println("a=b"); &#125; System.out.println("end"); &#125;&#125; 选择结构if语句(范围判断)注意：if的大括号可以省略，但是只执行下方的一条有用语句。 12345/* * if格式1：if（关系表达式）&#123; * 语句体1 * &#125; */ 1234567891011121314151617181920package com.will.work;import java.util.Scanner;public class OrderDemo &#123; public static void main(String[] args) &#123; int a,b; Scanner sc = new Scanner(System.in); System.out.println("请输入第一个整数：\r\n"); a = sc.nextInt(); System.out.println("请输入第二个整数：\r\n"); b = sc.nextInt(); System.out.println("start"); if(a==b) &#123; System.out.println("a=b"); &#125; System.out.println("end"); &#125;&#125; 1234567/* * if格式2：if（关系表达式）&#123; * 语句体1 * &#125;else&#123; * 语句体2 * &#125; */ 1234567891011121314151617181920212223242526272829package com.will.work;import java.util.Scanner;public class OrderDemo1 &#123; /* * 通过使用键盘录入判断奇偶数 */ public static void main(String[] args) &#123; int num; Scanner sc= new Scanner(System.in); System.out.println("请输入需要进行奇偶判断的数："); num = sc.nextInt(); /* * 方法1：使用if...else选择结构 */ if (num % 2==0) &#123; System.out.println(num+"是偶数."); &#125;else &#123; System.out.println(num+"是奇数"); &#125; /* * 方法2：使用三元运算 * String s = (num%2==0 ? "是偶数.":"是奇数."); * System.out.println("您输入的"+num+s); */ &#125;&#125; 12345678910111213141516171819202122232425262728293031323334353637package com.will.homework;import java.util.Scanner;public class Test_Expend_Zhipai &#123; public static void main(String[] args) &#123; int left, right, temp; Scanner sc = new Scanner(System.in); System.out.println("请输入小明左手中的纸牌：\n"); left = sc.nextInt(); System.out.println("请输入小明右手中的纸牌：\n"); right = sc.nextInt(); // 交换前牌的位置 System.out.println("互换前小明手中的纸牌：\n"); System.out.println("左手中的纸牌：" + left); System.out.println("右手中的纸牌：" + right); // 交换操作： // 方法1：if...else结构 if (left != right) &#123; temp = left; left = right; right = temp; &#125; System.out.println("互换后小明手中的纸牌：\n"); System.out.println("左手中的纸牌：" + left); System.out.println("右手中的纸牌：" + right); // 方法2：三目运算 int L = left != right ? right : left; int R = left != right ? left : right; // 交换后牌的位置 System.out.println("互换后小明手中的纸牌：\n"); System.out.println("左手中的纸牌：" + L); System.out.println("右手中的纸牌：" + R); &#125;&#125; 12345678910/* * if语句格式3： * if（关系表达式1）&#123; * 语句体1 * &#125;else if（关系表达式2）&#123; * 语句体2 * &#125;else&#123; * 上述条件不满足提示 * &#125; */ 123456789101112131415161718192021222324252627282930package com.will.work;import java.util.Scanner;public class OderDemo2 &#123; /* * 键盘录入进行分段函数判断 * 根据成绩输出相应级别（补充） */ public static void main(String[] args) &#123; int x, y; Scanner sc = new Scanner(System.in); System.out.println("请输入初始值："); x = sc.nextInt(); if (x &gt; 3) &#123; y = 2 * x + 1; System.out.println(x+"满足此分段函数，结果为："+y); &#125; else if (1&lt;=x &amp;&amp; x &lt;=3) &#123; y = 2 * x - 1; System.out.println(x+"满足此分段函数，结果为："+y); &#125; else if (x &lt; 1) &#123; y = 2 * x; System.out.println(x+"满足此分段函数,结果为："+y); &#125; else &#123; System.out.println(x+"不满足此分段函数."); &#125; &#125;&#125; 12345678910111213141516171819202122232425262728package com.will.work;import java.util.Scanner;public class IfType3_score &#123; /* * 根据成绩输出相应类型 */ public static void main(String[] args) &#123; int score; Scanner sc = new Scanner(System.in); System.out.println("请输入学生成绩：(0~100)"); score =sc.nextInt(); if(0&lt;=score&amp;&amp;score&lt;60) &#123; System.out.println("您查询的成绩为："+score+",属于：不合格！"); &#125;else if(60&lt;=score&amp;&amp;score&lt;75) &#123; System.out.println("您查询的成绩为："+score+",属于：良！"); &#125;else if(75&lt;=score&amp;&amp;score&lt;90)&#123; System.out.println("您查询的成绩为"+score+",属于：好！"); &#125;else if(90&lt;=score&amp;&amp;score&lt;=100) &#123; System.out.println("您查询的成绩为"+score+",属于：优秀！"); &#125; else &#123; System.out.println("您输入的成绩为："+score+",不属于查询范围(0~100),请检查后重新查询！"); &#125; &#125;&#125; switch（表达式的值与case后面的值进行匹配）123456789101112131415... /* * switch(flags) * case flag1 * 语句体1 * break； * case flag2 * 语句体2 * break； * case flag3 * 语句体3 * break； * default： * 默认：一般输出错误提示信息 */ 注意： switch中的表达式值的数据类型byte、short、char、int;不能为long、float、double等 case穿透：缺少break；会出现case穿透，即：穿透下一个case并执行其包含的语句体 123456789101112131415161718192021222324252627282930313233343536373839404142package com.will.work;import java.util.Scanner;public class Test_Switch &#123; /* * 通过使用switch语句按输入数字，输出相应的星期 */ public static void main(String[] args) &#123; int flag ; Scanner sc = new Scanner (System.in); System.out.println("请输入数字（1~7）："); flag = sc.nextInt(); switch(flag) &#123; case 1: System.out.println("星期一"); break; case 2: System.out.println("星期二"); break; case 3: System.out.println("星期三"); break; case 4: System.out.println("星期四"); break; case 5: System.out.println("星期五"); break; case 6: System.out.println("星期六"); break; case 7: System.out.println("星期日"); break; default: System.out.println("输入有误或不在范围内！"); &#125; &#125;&#125; 123456789101112131415161718192021222324252627282930313233343536373839404142package com.will.work;import java.util.Scanner;public class Test_Switch1 &#123; /* * 利用case穿透，减少代码量的小技巧 * 通过使用switch语句并利用case穿透判断季节 */ public static void main(String[] args) &#123; int flag ; Scanner sc = new Scanner (System.in); System.out.println("请输入月份进行季节查询（1~12）："); flag = sc.nextInt(); switch(flag) &#123; case 3: case 4: case 5: System.out.println(flag+"月是：春季"); break; case 6: case 7: case 8: System.out.println(flag+"月是：夏季"); break; case 9: case 10: case 11: System.out.println(flag+"月是：秋季"); break; case 12: case 1: case 2: System.out.println(flag+"月是：冬季"); break; default: System.out.println("您输入的月份为："+flag+",此月份不存在，请检查后重新查询！"); &#125; &#125;&#125; 循环结构概念：​ 在满足一定的条件的情况下, 反复执行某部分代码 for循环1234for循环 for(初始化语句 ; 判断条件语句 ; 控制条件语句)&#123; 循环体语句; &#125; 执行流程： A.初始化； B.进行判断； C.true：执行循环体，false：跳出for循环; D.执行条件控制语句； E.跳转到B. 12345678910111213141516package com.will.work;public class For_Demo &#123; /* * 打印HelloWorld */ public static void main(String[] args) &#123; for (int i=0;i&lt;5;i++) &#123; System.out.println("HelloWord"+i); &#125; System.out.println("----这是一条分割线----"); for(int i=5;i&gt;0;i--) &#123; System.out.println("HelloWord"+i); &#125; &#125;&#125; 123456789101112131415161718192021222324package com.will.work;public class For_Demo2 &#123; /* * 求1~100中偶数的和 */ public static void main(String[] args) &#123; // 定义求和变量 int sum = 0; // 通过for循环拿到1~100中的数据 for (int i = 0; i &lt;= 100; i++) &#123; if (i % 2 == 0) &#123; sum += i; &#125; &#125; System.out.println("1~100中偶数和为：" + sum); // 方法2： int sum1 = 0; for(int j=0;j&lt;=100;j+=2)&#123; sum1+=j; &#125; System.out.println("1~100中偶数和为：" + sum1); &#125;&#125; 123456789101112131415161718192021package com.will.work;public class For_Demo_Shuixianhuan &#123; /* * 水仙花数 */ public static void main(String[] args) &#123; int count = 0; for (int i = 100; 100 &lt;= i &amp;&amp; i &lt; 1000; i++) &#123; int ge = i % 10; int shi = i / 10 % 10; int bai = i / 10 / 10 % 10; //if (Math.pow(ge, 3) + Math.pow(shi, 3) + Math.pow(bai, 3) == i) if ((ge * ge * ge + shi * shi * shi + bai * bai * bai) == i) &#123; System.out.println(i); count++; &#125; &#125; System.out.println("水仙花数总计：" + count); &#125;&#125; 12345678910111213141516171819202122232425package com.will.work;public class For_Demo_huiwenshu &#123; /* * 回文数：ABCBA类型；12321；45654；78987 */ public static void main(String[] args) &#123; int count =0; for (int i=10000;10000&lt;=i&amp;&amp;i&lt;100000;i++) &#123; int ge = i%10; int shi = i/10%10; int bai = i/10/10%10; int qian = i/10/10/10%10; int wan = i/10/10/10/10%10; if(ge==wan&amp;&amp;shi==qian)&#123; System.out.print(i+"\t"); count++; if(count%5==0)&#123; System.out.println(); &#125; &#125; &#125; &#125;&#125; 死循环： for（;;）{...} for（;true;）{...} while循环1234567while循环 初始化语句 ; while(判断条件语句)&#123; 循环体语句; 控制条件语句; &#125; 123456789101112131415161718package com.will.work;public class While_Demo &#123; public static void main(String[] args) &#123; int i =0; while (i&lt;4) &#123; //打印一行有五颗* int count =0; while(count&lt;5) &#123; System.out.print("*"); count ++; &#125; //每五个换行 System.out.println(); i++; &#125; &#125;&#125; 12345678910111213141516171819202122232425262728package com.will.homework;public class While_Print &#123; /* * 1.打印1到100之内的整数，但数字中包含9的要跳过 * 2.每行输出5个满足条件的数，之间用空格分隔 * 3.如：1 2 3 4 5 */ public static void main(String[] args) &#123; int count = 0; int i = 0; //while 循环开始 while (i &lt; 100) &#123; i++; //条件控制语句 //循环语句开始 int ge = i % 10; int shi = i / 10 % 10; if (ge != 9 &amp;&amp; shi != 9) &#123; System.out.print(i + "\t"); count++; if (count % 5 == 0) &#123; System.out.println(); &#125; &#125; //循环语句结束 &#125; &#125;&#125; 死循环：while（true）{...} 建议使用！ do…while循环12345初始化语句; do&#123; 循环体语句; 控制条件语句; &#125;while(判断条件语句); 特点：至少执行一次循环体 1234567891011121314package com.will.work;public class DoWhile_Demo &#123; public static void main(String[] args) &#123; int i=0; do &#123; i++; if (i%3==0) &#123; continue; &#125; System.out.println(i); &#125;while(i&lt;5); &#125;&#125; 死循环：do{...}while(true); 三者的区别 for-while for循环在循环结束后，初始化语句不能再使用，while循环结束后初始化语句可以继续使用 for，while和do…while for,while先判断,在执行，do...while先执行在做判断，至少执行一次循环体 嵌套循环类型：for-forfor-whilewhile-whilewhile-for123456789101112131415161718192021222324252627282930313233343536373839package com.will.work;public class For_Test_Jiujiuchengfabiao &#123; /* * 九九乘法表 */ public static void main(String[] args) &#123; /* int z=0; for (int i =0;i&lt;4;i++) &#123; for(int j=0;j&lt;=z;j++) &#123; //z控制每行*的个数，第一行有一个*，第二行有两个* System.out.print("*"); &#125; z++; System.out.println(); //换行 &#125; */ /* * 优化 for (int i =0;i&lt;4;i++) &#123; for(int j=0;j&lt;=i;j++) &#123; //列数跟着行数变化 System.out.print("*"); &#125; System.out.println(); //换行 &#125; */ for (int i = 1; i &lt;= 9; i++) &#123; for (int j = 1; j &lt;= i; j++) &#123; System.out.print(j + "*" + i + "=" + j * i + "\t"); &#125; System.out.println(); &#125; &#125;&#125; 中断语句break语句作用：结束switch语句或者for,while,do...while循环语句 使用场景：1.switch 2.循环语句 标签语句：在嵌套循环中的某一循环前面添加标签，用于提示break结束的循环 注意：一般与if语句搭配使用 1234567891011121314151617181920package com.will.work;public class Break_Demo &#123; public static void main(String[] args) &#123; for(int i=0;i&lt;=10;i++) &#123; if(i==3) &#123; break; &#125; System.out.println(i); &#125; System.out.println("------------"); wc:for(int x=1;x&lt;=5;x++) &#123; nc:for(int y=1;y&lt;=5;y++) &#123; System.out.print("*"); break wc; &#125; System.out.println(); &#125; &#125;&#125; 1234567891011121314151617181920212223242526272829303132package com.will.homework;import java.util.Scanner;public class For_Score &#123; /* * 循环录入某学生的5门课程的成绩并计算平均分。 * 如果某分数录入为负，则停止录入并提示录入错误。 */ public static void main(String[] args) &#123; int score, sum = 0; boolean flags = true; double avg; Scanner sc = new Scanner(System.in); f: for (int i = 0; i &lt; 5; i++) &#123; System.out.println("请输入第" + (i + 1) + "门成绩:"); score = sc.nextInt(); if (score &gt;= 0 &amp;&amp; score &lt;= 100) &#123; sum += score; &#125; else &#123; flags = false; break f; &#125; &#125; if (flags == false) &#123; System.out.println("录入错误,请输入正确的成绩(1-100)!"); &#125;else &#123; avg = sum / 5.0; System.out.println("这个同学的平均分为：" + avg); &#125; &#125;&#125; continue语句使用场景：循环语句中（loop）：for,while,do...while 作用：满足条件，跳出本次循环，直接执行控制语句，进入下一次循环 注意：一般与if语句搭配使用 1234567891011121314151617181920212223242526272829303132333435package com.will.work;public class Continue_Demo &#123; public static void main(String[] args) &#123; for(int i=0;i&lt;=5;i++) &#123; if(i==3) &#123; continue; &#125; System.out.println(i); &#125; System.out.println("------------"); for(int i=0;i&lt;=5;i++) &#123; if(i==3) &#123; //此处先执行了i==3即：打印了3，才遇到continue,再跳出此次循环 System.out.println(i); continue; &#125; System.out.println(i); &#125; &#125;&#125;---------------------------------------------------------------------结果：01245------------012345 综合案例：1234567891011121314151617181920212223242526272829303132333435363738package com.will.work;import java.util.Random;import java.util.Scanner;public class Random_Game &#123; /* * 需求：猜数字小游戏 * 系统产生一个1~100之间的随机数，请猜出着随机数是多少？ * 猜大了提示：你猜的大了 * 猜小了提示：你猜的小了 * 相等提示：恭喜你猜对了 */ public static void main(String[] args) &#123; // 产生随机数 Random r = new Random(); // 接收随机数 int ran_num = r.nextInt(101); //[1,101) //int ran_num = r.nextInt(100)+1; //[0,100)+1 // 键盘录入数据 Scanner sc = new Scanner(System.in); while (true) &#123; System.out.println("请猜数："); int guess_num = sc.nextInt(); //结果判断 if (ran_num == guess_num) &#123; System.out.println("恭喜你猜对了！"); break; &#125; else if (ran_num &lt; guess_num) &#123; System.out.println("你猜的"+guess_num+"猜大了哦，再猜猜看吧！"); &#125; else if (ran_num &gt; guess_num) &#123; System.out.println("你猜的"+guess_num+"猜小了哦，再猜猜看！"); &#125; else &#123; System.out.println("提示一下：是1~100的数呢！"); &#125; &#125; &#125;&#125; 1234567891011121314151617181920212223242526272829303132333435363738394041424344package com.will.homework;import java.util.Scanner;public class While_Menu &#123; /* 1.从键盘上录入一个1到5的数字; 2.当数字为1时打印菜单"新建"; 当数字为2时打印菜单"打开文件"; 当数字为3时打印菜单"保存"; 当数字为4时打印菜单"刷新"; 当数字为5时打印菜单"退出",并退出程序; 此行代码可以终止java程序运行: System.exit(0); */ public static void main(String[] args) &#123; Scanner sc =new Scanner(System.in); while(true) &#123; System.out.println("请输入操作代码："); int flags=sc.nextInt(); switch(flags) &#123; case 1: System.out.println("新建"); break; case 2: System.out.println("打开文件"); break; case 3: System.out.println("保存"); break; case 4: System.out.println("刷新"); break; case 5: System.out.println("退出"); System.exit(0); break; default: System.out.println("请输入合法的操作代码(1-5)!"); &#125; &#125; &#125;&#125;]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>流程控制</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Java基础--Random]]></title>
    <url>%2F2019%2F07%2F22%2FJava%E5%9F%BA%E7%A1%80--Random%2F</url>
    <content type="text"></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Java基础--Random</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Java基础--数据类型和分类]]></title>
    <url>%2F2019%2F07%2F22%2FJava%E5%9F%BA%E7%A1%80--%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E5%92%8C%E5%88%86%E7%B1%BB%2F</url>
    <content type="text"><![CDATA[为什么有数据类型：​ Java语言是强类型语言，对于每一种数据都定义了明确的具体数据类型，在内存分配时，分配了不同大小的内存空间，方便节约内存以及内存管理 Java中的数据类型分类： 基本数据类型 引用数据类型（面向对象中补充） 基本数据类型整数型（默认类型int） 类型 长度 大小 注意 byte 1字节 -128~127 short 2字节 -2^15~2^15-1 int 4字节 -2^31~2^31-1 long 8字节 -2^63~2^63-1 后需要加L/l进行标识 浮点型（默认类型double） 类型 长度 大小 注意 float 4字节 -3.403E38~3.403E38 后需要加F/f进行标识 double 8字节 -1.798E308-1.798E308 字符型 类型 长度 大小 char 2字节 0~65535 布尔型 类型 长度 值 注意 boolean 1/8字节(理论上，没有明确指定) true\false 不可转化为其他类型 常见案例​ 作用域问题： ​ 同一作用域内不能使用相同的变量名 123456789class Demo_1DataType&#123; public static void main(String[] args)&#123; int x = 10; //int x = 20; System.out.println(x); &#125;&#125;-------------------------------------------------------10 ​ 初始值问题： ​ 局部变量在使用之前必须赋值 12345678910class Demo_2DataType&#123; public static void main(String[] args)&#123; int y; //y = 10; y = 10; System.out.println(y); &#125;&#125;-------------------------------------------------------10 ​ 一条语句可以定义几个变量： ​ int a,b,c,d…….; 123456789101112131415161718192021222324class Demo_3DataType&#123; public static void main(String[] args)&#123; int a,b,c; a = 10; b = 20; c = 30; short x = 1; long y = 2; byte z = 3; System.out.println(a); System.out.println(b); System.out.println(c); System.out.println(x); System.out.println(y); System.out.println(z); &#125;&#125;----------------------------------------------------102030123 数据类型之隐式转换123456789101112131415class Demo4_DataTypeConversion&#123; /* * byte,short,char --&gt; int --&gt;long --&gt; float --&gt;double *boolean 不参与运算 */ public static void main (String[] args)&#123; int x = 3; byte y = 4; //默认进行隐式转换——小转大：byte转换为int x = x+y; System.out.println(x); &#125; &#125;----------------------------------------------------7 数据类型之强制转换1234567891011121314151617181920212223242526class Demo5_DataTypeConversion&#123; public static void main (String[] args)&#123; int x = 3; byte y = 4; y = (byte)(x+y); //使用相应类型进行强制转换 System.out.println(y); /*向下强制转换后的值作为补码直接进行计算，这样会存在损失精度的问题*/ byte b = (byte)(126+4); System.out.println(b); //00000000 00000000 00000000 10000010 130的二进制 //10000010 强制转换后 -126是补码，即：126的补码 //10000001 补码-1 126的反码 //01111110 原码 126的原码 byte c = (byte)300; System.out.println(c); //00000000 00000000 00000001 00101100 300的二进制 //00101100 强制转换后 44是补码 &#125; &#125;------------------------------------------------------------------------7-12644 面试题：123456789101112131415161718192021222324252627class Test_DataTtpeConversion&#123; public static void main(String[] args)&#123; //看下面程序是否有问题，如果有问题，请说明理由。 byte b1 = 3; byte b2 = 4; byte b3 = b1 + b2; //此句有误 /* bug：Type mismatch: cannot convert from int to byte 两方面： 1.byte与byte（或short，char）进行运算时会提升为int，两个int相加后的和也为int类型 2.b1、b2是两个变量，变量存储的值是变化的，在编译的时候无法判断里面具体的值，相加有可能会超出byte的取值 Debug：强制转换 byte b3 = (byte)(b1 + b2); */ byte b4 = 3 + 4; /*这句为什么是正确的？ java编译器有常量优化机制,即：对常量结果进行判断。本题目中：7在-128~127之间，即：一个字节的长度内，所以直接赋值。 */ System.out.sprintln(b3); System.out.sprintln(b4); &#125; &#125;-------------------------------------------------------------------Debug后：77 long与float大小关系5]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>数据类型和分类</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Java基础--原码反码补码]]></title>
    <url>%2F2019%2F07%2F22%2FJava%E5%9F%BA%E7%A1%80--%E5%8E%9F%E7%A0%81%E5%8F%8D%E7%A0%81%E8%A1%A5%E7%A0%81%2F</url>
    <content type="text"><![CDATA[作用：用于计算、强制类型转换 区分：有符号位数据表示方式（最高位为符号位） 数 原码 反码 补码 正数 与原码同（0011） 与原码同（0011） 与原码同（0011） 负数 与原码同（1011） 原码逐位取反（0100） 反码末位加1（0101） 计算： ​ A:已知原码求补码（先取反再加1） ​ 1011 原码 ​ 0100 反码 ​ 0101 补码 ​ B:已知补码求原码 ​ 0101 补码 ​ 0100 反码 ​ 1011 原码]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>原码反码补码</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Java基础--语法格式]]></title>
    <url>%2F2019%2F07%2F22%2FJava%E5%9F%BA%E7%A1%80--%E8%AF%AD%E6%B3%95%E6%A0%BC%E5%BC%8F%2F</url>
    <content type="text"><![CDATA[常用快捷键注释​ -用于解释说明程序的文字 分类单行注释​ -格式：//注释文字 快捷键:Ctrl+/ 多行注释​ -格式：/*注释文字*/ 快捷键:Ctrl+Shift+/ Ctrl+Shift+\ 文档注释​ -格式：/**注释文字*/ 作用​ -用于解释说明程序 ​ -便于方便调试错误 关键字​ -被赋予特殊意义单词 特点：​ -组成关键字的字母全部要小写 常量概述​ -在程序执行过程中,其值不可以发生改变的量 分类字面值常量:​ -字符串常量 用双括号括起来的内容(“HelloWorld!”) ​ -整数常量 所有整数(12,-20) ​ -小数常量 所有小数(12.34) ​ -字符常量 用单引号括起来的内容(‘a’,’A’,’B’) 注意: ​ 单引号中只能放一个(错误案例:&#39;AB&#39;) ​ 空字符:\u0000 ​ -布尔常量 较为特有:(true/false) ​ -空常量 null(数组部分讲解) 自定义常量:​ -final 数据类型 变量名 = 初始值; 标识符​ -给包,项目,类,方法,变量等起名字的符号 组成:字母,数字,下划线,$ 起名规范:​ -包的命名方法:域名倒写(com.baidu.www) ​ -大驼峰:每一个单词的首字母都需要大写,用于命名:类,接口(Test,Interface) ​ -小驼峰:一个单词全小写,两个以上,从第二个开始首字母大写,可用于 命名:项目,方法,变量(schoolOcr,test,delete,number) ​ -自定义常量:每个字母都需要大写,单词之间用下划线(MAX_NUMBER) 注意: ​ -不能以数字开头 ​ -不能以关键字命名 ​ -严格区分大小写 ​]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>语法格式</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo-NexT主题配置]]></title>
    <url>%2F2019%2F07%2F12%2FHexo-NexT%E4%B8%BB%E9%A2%98%E9%85%8D%E7%BD%AE%2F</url>
    <content type="text"></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>NexT</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[test_my_site]]></title>
    <url>%2F2019%2F07%2F09%2Ftest-my-site%2F</url>
    <content type="text"></content>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2019%2F07%2F09%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
  </entry>
</search>
